SET search_path = public;

BEGIN;

CREATE EXTENSION IF NOT EXISTS citext;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'user_role') THEN
    CREATE TYPE user_role AS ENUM ('admin','teacher','student');
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'enrollment_status') THEN
    CREATE TYPE enrollment_status AS ENUM ('enrolled','dropped','completed','waitlisted','denied');
  END IF;
END $$;

CREATE OR REPLACE FUNCTION set_updated_at()
RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
  NEW.updated_at := now();
  RETURN NEW;
END $$;

CREATE OR REPLACE FUNCTION set_waitlisted_at()
RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
  IF NEW.status = 'waitlisted' THEN
    IF TG_OP='INSERT' OR OLD.status IS DISTINCT FROM 'waitlisted' THEN
      NEW.waitlisted_at := now();
    ELSE
      NEW.waitlisted_at := COALESCE(NEW.waitlisted_at, OLD.waitlisted_at);
    END IF;
  END IF;
  RETURN NEW;
END $$;

-- -------------------------
-- Tables
-- -------------------------
CREATE TABLE IF NOT EXISTS majors (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    code CITEXT UNIQUE NOT NULL,
    name TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TABLE IF NOT EXISTS terms (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    code TEXT UNIQUE NOT NULL,
    starts_on DATE NOT NULL,
    ends_on DATE NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    CHECK (starts_on < ends_on)
);
CREATE TABLE IF NOT EXISTS faculty_registry (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email CITEXT UNIQUE NOT NULL,
    teacher_number TEXT UNIQUE NOT NULL,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TABLE IF NOT EXISTS users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    role user_role NOT NULL,
    email CITEXT NOT NULL UNIQUE,
    password_hash TEXT NOT NULL,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    student_number TEXT UNIQUE,
    teacher_number TEXT UNIQUE,
    reset_token TEXT,
    token_created_at TIMESTAMPTZ,
    account_created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    CHECK (email ~* '^[^@]+@[^@]+\.edu$')
);
CREATE TABLE IF NOT EXISTS user_majors (
    user_id BIGINT NOT NULL REFERENCES users (id) ON DELETE CASCADE,
    major_code CITEXT NOT NULL REFERENCES majors (code) ON UPDATE CASCADE,
    PRIMARY KEY (user_id, major_code)
);
CREATE TABLE IF NOT EXISTS courses (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    code TEXT UNIQUE NOT NULL,
    name TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
CREATE TABLE IF NOT EXISTS course_offering (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    course_id BIGINT NOT NULL REFERENCES courses (id) ON DELETE CASCADE,
    code TEXT NOT NULL,           
    name TEXT NOT NULL,
    description TEXT NOT NULL,
    term_id BIGINT NOT NULL REFERENCES terms (id) ON DELETE RESTRICT,
    teacher_id BIGINT REFERENCES users (id) ON DELETE RESTRICT,
    credits INT NOT NULL CHECK (credits > 0 AND credits <= 5),
    section TEXT NOT NULL DEFAULT 'A',   
    total_seats INT NOT NULL CHECK (total_seats >= 0),
    enrollment_open BOOLEAN NOT NULL DEFAULT TRUE,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    CONSTRAINT uq_offering_code_term_section UNIQUE (code, term_id, section),
    CONSTRAINT chk_offering_code_format CHECK (code ~ '^[A-Z]{2,5}[0-9]{3}$')
);
CREATE TABLE IF NOT EXISTS course_prereqs (
    offering_id BIGINT NOT NULL REFERENCES course_offering (id) ON DELETE CASCADE,
    prereq_offering_id BIGINT NOT NULL REFERENCES course_offering (id) ON DELETE CASCADE,
    PRIMARY KEY (offering_id, prereq_offering_id),
    CHECK (offering_id <> prereq_offering_id)
);
CREATE TABLE IF NOT EXISTS enrollments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    offering_id BIGINT NOT NULL REFERENCES course_offering (id) ON DELETE CASCADE,
    student_id BIGINT NOT NULL REFERENCES users (id) ON DELETE CASCADE,
    status enrollment_status NOT NULL DEFAULT 'waitlisted',
    enrolled_at TIMESTAMPTZ,
    dropped_at TIMESTAMPTZ,
    completed_at TIMESTAMPTZ,
    waitlisted_at TIMESTAMPTZ,
    denied_at TIMESTAMPTZ,
    final_percent NUMERIC(5, 2) CHECK (
        final_percent IS NULL
        OR (final_percent >= 0 AND final_percent <= 100)
    ),
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    UNIQUE (offering_id, student_id)
);
CREATE TABLE IF NOT EXISTS assignments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    offering_id BIGINT NOT NULL REFERENCES course_offering (id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    description TEXT,
    weight_percent NUMERIC(5, 2) NOT NULL CHECK (weight_percent > 0 AND weight_percent <= 100),
    assigned_on DATE NOT NULL DEFAULT CURRENT_DATE,
    due_at TIMESTAMPTZ NOT NULL,
    is_open BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    UNIQUE (offering_id, title)
);
CREATE TABLE IF NOT EXISTS submissions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    assignment_id BIGINT NOT NULL REFERENCES assignments (id) ON DELETE CASCADE,
    student_id BIGINT NOT NULL REFERENCES users (id) ON DELETE CASCADE,
    submission_url TEXT NOT NULL,
    submitted_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    grade_percent NUMERIC(5, 2) CHECK (grade_percent >= 0 AND grade_percent <= 100),
    graded_at TIMESTAMPTZ,
    graded_by BIGINT REFERENCES users (id) ON DELETE SET NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    UNIQUE (assignment_id, student_id)
);
CREATE TABLE IF NOT EXISTS course_materials (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    offering_id BIGINT NOT NULL REFERENCES course_offering (id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    url TEXT NOT NULL,
    uploaded_by BIGINT REFERENCES users (id) ON DELETE SET NULL,
    uploaded_at TIMESTAMPTZ NOT NULL DEFAULT now()
);
-- -------------------------
-- Constraint wiring
-- -------------------------
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'users_teacher_number_fkey') THEN
    ALTER TABLE users
      ADD CONSTRAINT users_teacher_number_fkey
      FOREIGN KEY (teacher_number)
      REFERENCES faculty_registry(teacher_number)
      ON UPDATE CASCADE
      ON DELETE RESTRICT;
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'users_role_consistency') THEN
    ALTER TABLE users
      ADD CONSTRAINT users_role_consistency CHECK (
        (role = 'teacher' AND teacher_number IS NOT NULL)
        OR (role = 'student' AND teacher_number IS NULL)
        OR (role = 'admin')
      );
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'assignments_due_after_assigned_ck') THEN
    ALTER TABLE assignments
      ADD CONSTRAINT assignments_due_after_assigned_ck
      CHECK (due_at::date >= assigned_on);
  END IF;
END $$;

-- -------------------------
-- Business logic functions
-- -------------------------
CREATE OR REPLACE FUNCTION enforce_max3_majors()
RETURNS trigger LANGUAGE plpgsql AS $$
DECLARE cnt int;
BEGIN
  PERFORM 1 FROM users WHERE id = NEW.user_id FOR UPDATE;
  SELECT COUNT(*) INTO cnt FROM user_majors WHERE user_id = NEW.user_id;
  IF TG_OP = 'INSERT' THEN
    IF cnt >= 3 THEN
      RAISE EXCEPTION 'User % already has 3 majors', NEW.user_id USING ERRCODE = '23514';
    END IF;
  END IF;
  RETURN NEW;
END $$;

CREATE OR REPLACE FUNCTION compute_final_percent(p_offering_id BIGINT, p_student_id BIGINT)
RETURNS NUMERIC LANGUAGE plpgsql AS $$
DECLARE pct NUMERIC;
BEGIN
  SELECT ROUND(SUM(COALESCE(s.grade_percent,0) * a.weight_percent)/100.0, 2)
    INTO pct
  FROM assignments a
  LEFT JOIN submissions s
    ON s.assignment_id = a.id AND s.student_id = p_student_id
  WHERE a.offering_id = p_offering_id;
  RETURN COALESCE(pct, 0);
END $$;

CREATE OR REPLACE FUNCTION percent_to_gpa(pct NUMERIC)
RETURNS NUMERIC LANGUAGE plpgsql IMMUTABLE AS $$
BEGIN
  RETURN CASE
    WHEN pct >= 93 THEN 4.0
    WHEN pct >= 90 THEN 3.7
    WHEN pct >= 87 THEN 3.3
    WHEN pct >= 83 THEN 3.0
    WHEN pct >= 80 THEN 2.7
    WHEN pct >= 77 THEN 2.3
    WHEN pct >= 73 THEN 2.0
    WHEN pct >= 70 THEN 1.7
    WHEN pct >= 67 THEN 1.3
    WHEN pct >= 63 THEN 1.0
    WHEN pct >= 60 THEN 0.7
    ELSE 0.0
  END;
END $$;
-- -------------------------
-- Indexes
-- -------------------------
CREATE INDEX IF NOT EXISTS idx_offering_term              ON course_offering (term_id);
CREATE INDEX IF NOT EXISTS idx_offering_course            ON course_offering (course_id);
CREATE INDEX IF NOT EXISTS idx_offering_teacher           ON course_offering (teacher_id);
CREATE INDEX IF NOT EXISTS idx_offering_code_term_section ON course_offering (code, term_id, section);

CREATE INDEX IF NOT EXISTS idx_enroll_offering            ON enrollments (offering_id);
CREATE INDEX IF NOT EXISTS idx_enroll_student             ON enrollments (student_id);
CREATE INDEX IF NOT EXISTS idx_enroll_student_offering    ON enrollments (student_id, offering_id);
CREATE INDEX IF NOT EXISTS idx_enroll_offering_enrolled   ON enrollments (offering_id) WHERE status = 'enrolled';
CREATE INDEX IF NOT EXISTS idx_enroll_offering_waitlisted ON enrollments (offering_id, waitlisted_at) WHERE status = 'waitlisted';

CREATE INDEX IF NOT EXISTS idx_course_prereqs_offering        ON course_prereqs (offering_id);
CREATE INDEX IF NOT EXISTS idx_course_prereqs_prereq_offering ON course_prereqs (prereq_offering_id);

CREATE INDEX IF NOT EXISTS idx_assignments_offering       ON assignments (offering_id);
CREATE INDEX IF NOT EXISTS idx_assignments_offering_weight ON assignments (offering_id, weight_percent);

CREATE INDEX IF NOT EXISTS idx_submissions_assignment     ON submissions (assignment_id);
CREATE INDEX IF NOT EXISTS idx_submissions_student        ON submissions (student_id);

CREATE INDEX IF NOT EXISTS idx_faculty_email              ON faculty_registry (email);
CREATE INDEX IF NOT EXISTS idx_faculty_tnum               ON faculty_registry (teacher_number);

CREATE INDEX IF NOT EXISTS idx_user_majors_major          ON user_majors (major_code);

CREATE INDEX IF NOT EXISTS idx_materials_offering         ON course_materials (offering_id);
CREATE INDEX IF NOT EXISTS idx_materials_uploaded_by      ON course_materials (uploaded_by);
